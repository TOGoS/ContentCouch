# Proposal for a simplified RDF serialization format for encoding directories and commits based on JSON

## Directory

{
	"classUri": "http://ns.nuke24.net/ContentCouch/Directory",
	"entries": [
		{
			"name": "A Subdirectory",
			"target": {
				"classUri": "http://ns.nuke24.net/ContentCouch/Directory",
				"uri": "x-rdf-subject:urn:bitprint:QMWRICSFPENL7HRTRGC7DA5VZIREYVTG.Z5OAUTQ6R5CYY3KTVIXHELUS5RHENFMC3BLR3ZQ"
			}
		},
		{
			"name": "Josh.jpg",
			"target": {
				"classUri": "http://ns.nuke24.net/ContentCouch/Blob",
				"uri": "urn:bitprint:FQMXI25FR6BDDL4VCXH3S354FXBQFNWO.D5XJH6LABGRW7STOBRYID7KIQUUQWFHFS4BBCLY",
				"fileLength": 3109320
			},
			"modified": "2014-01-03 16:52:24 GMT"
		},
		{
			// Let's leave out "classUri" for directory entries.
			// It's implied to be "http://ns.nuke24.net/ContentCouch/DirectoryEntry".
			"name": "puppy.jpg",
			"target": {
				"classUri": "http://ns.nuke24.net/ContentCouch/Blob",
				"uri": "urn:bitprint:RMMC6UCNGQHOVMDWUYLIYZ74CAQXDYPK.XV3RIKWP66GYUN7TWWPKH2DSOYUHSXP5QDLPE4A",
				"fileLength": 315764
			}
			"modified": "2014-05-26 01:31:48 GMT",
			"comment": "OMG cute dog!"
		}
	]
}

## Commit

{
	"classUri": "http://ns.nuke24.net/ContentCouch/Commit",
	"parentUri": "http://ns.nuke24.net/ContentCouch/Directory",
	"target": {
		"classUri": "http://ns.nuke24.net/ContentCouch/Directory",
		"uri": "x-rdf-subject:urn:bitprint:65D2JF5JOFF7FYWWFZBLTUEBRTLACUPV.GJKD7NNPVK3EQ62KLE5R26EE6R4MGFKQSVNTS2Q"
	},
	"created": "2013-11-12 02:07:48 GMT",
	"creator": "maude-trtd",
	"description": "Music archive on Maude, 2013-11-11"
}

## Formatting specifics

Following these ensures that there is a single, 'canonical'
representation of each object, which I've tried to follow in the
examples above.

- Directory entries should sorted lexographically
- Each level of indentation should be a single tab.
- Files should be terminated by a newline.

## Notes

The idea here is that we store the same structure represented in the
RDF+XML documents in JSON.  Preferrably in a way that's easy to
translate back and forth, or even interpret as an RDF serialization
format.

Following is the proposed mapping.

Examples:

Reference an object by URI:

  <someProperty rdf:resource="urn:something"/>

  "somePropertyUri": "urn:something"

  or

  "someProperty": { "uri": "urn:something" }

Talk about an object:

  <SomeClass xmlns="http://namespace/">...</SomeClass>

  {
    "classUri": "http://namespace/SomeClass",
    ...
  }

  Or (even shorter, somewhat less precise), just using the last part of the class URI, calling it 'class name':

  {
    "className": "SomeClass",
    ...
  }
