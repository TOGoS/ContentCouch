How does ContentCouch interpret URIs?

The general format of a ContentCouch URI is

  cc-uri = cc-prefrag-uri[??<cc-metadata>][#<cc-path>]
  cc-prefrag-uri = {<func-name> <cc-uri>} | <uri>
  cc-metadata = <key>=<value>[&<cc-metadata>]
  cc-path = <path>[??<cc-metadata>][#<cc-path>]
  func-name = as-dir

If the pre-fragment part of the URI references a directory object (not a directory
on ths server, not a document representing a directory, but a 'directory object'),
then the fragment is a path to follow within that directory.

Git blobs, commits, and trees can be referenced by their git IDs.
Git-blob URIs reference blobs that happen to be stored in a git repository, while
git-commit and git-tree URIs dereference to objects that may be treated as directory
objects (but may also contain git specific metadata).

  git-blob:<name>                  ; a specific blob
  git-blob:<name>??type=text/plain ; a specific blob with some metadata
  git-commit:<name>                ; a git commit - does not represent a blob!
  git-commit:<name>#path/to/file   ; a blob or a git tree
  git-tree:<name>#path/to/file     ; same as above
  git-tree:<name>#path/to/file     ; same as above
  
URIs that reference RDF documents containing ccouch:Directory descriptions must
be explicitly interpreted as directories - otherwise they will be interpreted
as blobs or RDF documents:

  urn:sha1:POOP??type=application/rdf+xml               ; an RDF document
  {as-dir urn:sha1:POOP??type=application/rdf+xml}      ; a directory
  @urn:sha1:POOP??type=application/rdf+xml              ; shorthand for as-dir
  @freenet:GAGAWAGA/MyRepo/heads/53/latest              ; useful use of shorthand
  {as-dir urn:sha1:POOP??type=application/rdf+xml}/yuk  ; a sub-directory
  {as-dir urn:sha1:POOP??type=application/rdf+xml}#yuk  ; same sub-directory