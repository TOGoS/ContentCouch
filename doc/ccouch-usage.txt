# All ccouch commands are working in the context of a current local
# repository.  In some cases, it will be a system-wide repository.
# In other cases, it will be a repository specific to a project.
# Any local repository may be configured to use the datastore of
# another, so that all projects can, for example, share a system-wide
# datastore.
#
# In general, an @-sign before a URI means 'the thing described by
# this resource', which may be a list of resource, a reference to a
# single resource, or a resource describing a directory or a
# collection.  When the following points to an RDF document, this has
# the same effect as prefixing the URL with x-parse-rdf:, which is
# how 'the object described by ...' URLs are passed around and stored
# internally.


# Checkout takes a file or directory and exports it to your filesystem
# Usage: ccouch checkout <remote> <local>
ccouch checkout urn:sha1:BLOB a-file.txt
ccouch checkout @urn:sha1:DIRLISTING a-directory
ccouch checkout @urn:sha1:REDIRECTTOAFILEORDIR something


# Merge updates a local directory by adding files to it from another
# (possibly remote) directory.
# Usage: ccouch merge <remote> <local>
ccouch merge @urn:sha1:REMOTEDIR .
ccouch merge @http://togos-dyn.ath.cx/directory-list mahdir/
ccouch merge http://togos-dyn.ath.cx/mahfiles/ mahfiles/


# Store takes local files or directories, imports them into the repository's
# data store, and outputs the URNs of the stored files/directories.
# Usage: ccouch store <file1> <file2> ...
ccouch store mahfile.mp3
ccouch store somedir


# Cache: cache files from a remote repository without checking them out
# Usage: ccocuch cache[:<repo-name>] <file1> <file2>
# If <repo-name> is given, will cache files into the named repository,
# ignoring whether or not they are already available in other [local]
# repositories
ccouch cache urn:sha1:SOMEFILE ...
ccouch cache @urn:sha1:SOMEDIRECTORY ; will cache all files and subdirs



# Pull heads from other repositories
# Usage: ccouch pull [-no-cache] <project-name> [<remote-repo>]
# Unless -no-cache option is given, will also try to cache files referenced
# by the new head in the cache repository.
# <project-name> and <remote-repo> can also be full URLs
ccouch pull rocker barney
ccouch pull rocker x-ccouch://barney/heads/barney/rocker/latest
ccouch push x-ccouch://fred/heads/barney/rocker/new x-ccouch://barney/heads/barney/rocker/latest



# Push heads to other repositories
# Usage: ccouch push [-no-rcache] <project-name> <remote-repo>
# Unless -no-cache is given, will also try to push dependent
# files to the remote repository
# <project-name> and <remote-repo> can also be full URLs
ccouch push rocker barney
ccouch push rocker x-ccouch://barney/heads/fred/rocker/new
ccouch push urn:sha1:SOMECOMMIT x-ccouch://barney/heads/fred/rocker/new